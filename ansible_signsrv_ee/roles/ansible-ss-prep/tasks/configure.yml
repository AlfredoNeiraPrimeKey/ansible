---

- name: Enable the firewalld service
  service:
    name: firewalld
    state: started
    enabled: yes

- block:
    - name: Add environment variables to {{ signsrv_user }} user profile
      template:
        src: user_profile.j2
        dest: "{{ signsrv_user_profile }}/.bash_profile"
        owner: "{{ signsrv_user }}"
        group: "{{ signsrv_group }}"

    - name: Check if {{ signsrv_user }} owns the {{ signsvr_home }} directory
      stat:
        path: "{{ signsvr_root_dir }}/{{ signsrv_src_dir_name }}"
      register: signsrv_owns_it

    #- name: debug the variables
    #  debug:
    #    var: primekey_owns_it

    - name: Set file permissions for {{ signsvr_home }}
      file:
        path: "{{ signsvr_home }}"
        state: directory
        recurse: yes
        owner: "{{ signsrv_user }}"
        group: "{{ signsrv_group }}"
      when: signsrv_user not in signsrv_owns_it.stat.pw_name

    - name: Ensure signserver-custom/conf directory exists
      file:
        path: "{{ signsvr_home }}/../signserver-custom/conf"
        state: directory
        owner: "{{ signsrv_user }}"
        group: "{{ signsrv_group }}"

  when: signsvr_manage_user

- name: Set permissions on softhsm lib directory
  file:
    path: /var/lib/softhsm
    state: directory
    recurse: yes
    mode: 0750
    owner: "{{ signsrv_user }}"
    group: "{{ signsrv_group }}"

- name: check slots
  shell: "softhsm2-util --show-slots | grep {{ item.slot_name }}"
  register: show_hsm_slots
  loop: "{{ signsrv_gen_hsm_slots }}"
  changed_when: show_hsm_slots.rc != 0
  failed_when: false
  no_log: true

- name: create HSM slots
  command: "softhsm2-util --init-token --free --label {{ item.item.slot_name }} --so-pin {{ item.item.slot_so_pin }} --pin {{ item.item.slot_pin }}"
  become: yes  
  become_user: "{{ signsrv_user }}" 
  loop: "{{ show_hsm_slots.results }}"
  no_log: true
  register: create_hsm_slots
  when: item.changed

- name: Deploy Wildfly standalone.xml
  template:
    src: "{{ wildfly_standalone_file }}"
    dest: "{{ wildfly_home }}/standalone/configuration/standalone.xml"
    owner: "{{ signsrv_user }}"
    group: "{{ signsrv_group }}"
  notify: restart wildfly

- name: Copy Sign Server XML Security libs to Wildfly
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ signsrv_user }}"
    group: "{{ signsrv_group }}" 
    remote_src: yes
  loop: "{{ signsrv_xalan_xml_files }}"
  loop_control:
    label: "{{ item.src }}"
  notify: restart wildfly

- name: Update Xalan XML module file
  template:
    src: xalan-module.xml.j2
    dest: "{{ wildfly_home }}/modules/system/layers/base/org/apache/xalan/main/module.xml"
    owner: "{{ signsrv_user }}"
    group: "{{ signsrv_group }}"
  notify: restart wildfly

- name: flush handlers
  meta: flush_handlers

- name: Ensure templated SignServer property files are copied to signerserver-custom/conf
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ signsrv_user }}"
    group: "{{ signsrv_group }}"
  loop: "{{ signsrv_templated_properties_files }}"
  loop_control:
    label: "{{ item.src }}"
  register: configured_ejbca_properties

- name: Register properties files in signserver-custom/conf
  find:
    paths: "{{ signsvr_home }}/../signserver-custom/conf/"
    patterns: "*.properties"
  register: found_properties_files

- name: Register properties files that has a matching sample file in SignServer conf directory
  stat:
    path: "{{ signsvr_home }}/conf/{{ item }}.sample"
  register: found_properties_files_with_matching_sample
  loop: "{{ found_properties_files.files | map(attribute='path') | map('basename') | list }}"

- name: Set variable properties files to be removed using (properties files in signserver-custom | intersect (properties files with matching sample)) | difference(templated properties files)
  set_fact:
    signsrv_properties_files_to_remove: "{{ ( found_properties_files.files | map(attribute='path') | map('basename') | list | intersect (found_properties_files_with_matching_sample.results | selectattr('stat.path', 'defined') | map(attribute='item') | list )) | difference(signsrv_templated_properties_files | map(attribute='dest') | map('basename') | list ) }}"

- name: Ensure that default SignServer properties files not in list of templated SignServer properties files are removed
  block:
  - name: Ensure existing properties files not in list of templated SignServer properties files are removed from signserver-custom/conf folder
    file:
      path: "{{ signsvr_home }}/../signserver-custom/conf/{{ item }}"
      state: absent
    loop: "{{ signsrv_properties_files_to_remove }}"

  - name: Ensure existing properties files not in list of templated SignServer properties files are removed from signserver/conf folder
    file:
      path: "{{ signsvr_home }}/conf/{{ item }}"
      state: absent
    loop: "{{ signsrv_properties_files_to_remove }}"
    register: removed_signsrv_properties
  when: signsrv_properties_files_to_remove

- name: Configure SignServer Time Monitor service property file is copied to {{ signsvr_home}}/conf
  template:
    src: timemonitor.properties.j2
    dest: "{{ signsvr_home }}/conf/timemonitor.properties"
    owner: "{{ signsrv_user }}"
    group: "{{ signsrv_group }}"
  register: configured_ss_timemon_properties
  when: enable_timemonitor_service|bool

- name: Configure SignServer Time Monitor service file
  template:
    src: timemonitor-systemd.service.j2
    dest: "{{ systemd_dir }}/timemonitor.service"
  register: configured_ss_timemon_service
  when: enable_timemonitor_service|bool

- name: Enable the timemonitor service
  service:
    name: timemonitor
    state: started
    enabled: yes
  when: enable_timemonitor_service|bool

- name: Check if application server exists
  stat:
    path: "{{ wildfly_home }}"
  register: found_appsrv_home
